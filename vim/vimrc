" vim: fdm=marker foldlevel=0
" ------------------------------------------------------------------------------
" Settings
" ------------------------------------------------------------------------------
" Settings {{{
let mapleader = " "

set autoread
set autowrite
set autoindent
set backspace=indent,eol,start
set belloff+=ctrlg
set clipboard=unnamed
set colorcolumn=81,101,121
set completeopt-=preview
set completeopt+=menuone,noselect
set diffopt+=vertical
set display=truncate
set foldlevelstart=999
set foldmethod=indent
set hidden
set history=500
set ignorecase
set incsearch
set laststatus=2
set list listchars=tab:➔\ ,trail:‧,nbsp:‧,extends:»,precedes:«
set mouse=a
set nobackup
set nowritebackup
set noswapfile
set number
set shortmess+=c   " Shut off completion messages
set undolevels=1000
set signcolumn=yes
set smartcase
set showcmd
set tags^=./.git/tags;
set ttimeout
set ttimeoutlen=100
set ttyfast
set wildmenu

if filereadable(expand("~/.vim/vimrc.bundles"))
  source ~/.vim/vimrc.bundles
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

filetype plugin indent on
" }}}
" Colorscheme {{{
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set termguicolors
set background=dark
colorscheme monokai_pro
" }}}
" Set custom grepprg {{{
if executable('rg')
  set grepprg=rg\ --smart-case\ --vimgrep
  " set grepformat=%f:%l:%c:%m
endif
" }}}
" Persistent undo {{{
if has('persistent_undo')
  set undodir=$HOME/.vim/undo
  set undofile
  if !isdirectory(&undodir) | call mkdir(&undodir, 'p', 0700) | endif
endif
" }}}
" ------------------------------------------------------------------------------
" Keymaps
" ------------------------------------------------------------------------------
" Grep word under cursor {{{
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}
" Window manipulation {{{
" Quicker window movement
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize windows
nnoremap <esc><up>    <c-w>+
nnoremap <esc><down>  <c-w>-
nnoremap <esc><left>  <c-w><
nnoremap <esc><right> <c-w>>

" zoom in and out of a vim pane
nnoremap <leader>zi :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>zo :wincmd =<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" }}}
" Emacs-style editing on the command-line: {{{
" start of line
cnoremap <C-A> <Home>
" back one character
cnoremap <C-B> <Left>
" delete character under cursor
cnoremap <C-D> <Del>
" end of line
cnoremap <C-E> <End>
" forward one character
cnoremap <C-F> <Right>
" recall newer command-line
cnoremap <C-N> <Down>
" recall previous (older) command-line
cnoremap <C-P> <Up>
" back one word
cnoremap <Esc>b <S-Left>
" forward one word
cnoremap <Esc>f <S-Right>
" }}}
" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------
"  vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline_symbols = {}
let g:airline_symbols.dirty='⚡️'
" }}}
" janko-m/vim-test {{{
let test#strategy = "vimux"

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>
" }}}
" junegunn/fzf.vim {{{
nnoremap <c-p> :Files<cr>
nnoremap <silent> <leader>B :Buffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>[ :BTags<CR>
nnoremap <silent> <leader>] :Tags<CR>
nnoremap <silent> <leader>? :History<CR>

let g:fzf_colors = {
      \ 'bg': ['bg', 'StatusLine'],
    \ }

let g:fzf_layout = { 'tmux': '-p80%' }
" }}}
" lifepillar/colortemplate {{{
let g:colortemplate_no_mappings = 1
" }}}
" lifepillar/vim-mucomplete {{{
let g:mucomplete#enable_auto_at_startup = 1
" }}}
" sgur/vim-editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}
" tpope/vim-commentary {{{
nmap cm <Plug>Commentary
" }}}
" tpope/vim-rails {{{
nnoremap <leader>aa :A<CR>
nnoremap <leader>as :AS<CR>
nnoremap <leader>av :AV<CR>
" }}}
" w0rp/ale {{{
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1

let g:ale_fixers = {
  \ 'css': ['prettier'],
\ }

let g:ale_linters = {
  \ 'ruby': ['standardrb'],
\ }

if emoji#available()
  let g:ale_sign_error = emoji#for('fire')
  let g:ale_sign_warning = emoji#for('point_right')
endif

nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)
" }}}
" Local config {{{
if filereadable($HOME . "/.vim/vimrc.local")
  source ~/.vim/vimrc.local
endif
" }}}
